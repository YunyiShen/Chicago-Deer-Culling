shiny::runApp()
require(ReCAP)
runApp()
runApp()
load("4harv_8fec_6surv_equal.RData")
Scheme_temp = analysisScheme(Chicago_RES$mcmc.objs,
Assumptions,c(8,3),
16,Harvest_matrix_at_this_level,quota = input$quota)
runApp()
runApp()
install.packages("ReCAP_0.1.1.tar.gz", repos = NULL, type = "source")
runApp()
runApp()
runApp()
Scheme_temp = analysisScheme(Chicago_RES$mcmc.objs,
Assumptions,c(8,3),
16,Harvest_matrix_at_this_level,quota = F)
eyes(16)
library(Matrix)
eyes(16)
eyes(1)
eyes(2)
ReCAP::eyes(7)
rm("eyes")
Scheme_temp = analysisScheme(Chicago_RES$mcmc.objs,
Assumptions,c(8,3),
16,Harvest_matrix_at_this_level,quota = F)
runApp()
runApp()
runApp()
rm(list = lsf.str())
runApp()
runApp()
shiny::runApp()
shiny::runApp()
require(ReCAP)
runApp()
install.packages("/media/yunyi/Academia/UW Lab jobs/3. Lislie Reconstruction/DDLeslie_package/Chicago_scheme/Population_simulation_scheme/ReCAP_0.1.1.tar.gz", repos = NULL, type = "source")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?ggplot2::ylim
runApp()
runApp()
runApp()
runApp()
577/.7
shiny::runApp()
runApp()
Scheme_temp
sum_temp
sum_temp = lapply(sum_temp,function(w,sumover){
colSums( matrix( w[ as.numeric( sumover),],ncol = 17,na.rm = T))
},input$sumover)
?colSums
sum_temp = lapply(sum_temp,function(w,sumover){
colSums( matrix( w[ as.numeric( sumover),],ncol = 17),na.rm = T)
},input$sumover)
sum_temp
sum_total = Reduce(rbind,sum_total)
sum_temp = Reduce(rbind,sum_temp)
sum_temp_mean = colMeans(sum_temp,na.rm = T)
CI_low = apply(sum_temp,2,quantile,0.025, na.rm = T)
CI_high = apply(sum_temp,2,quantile,0.975, na.rm = T)
poster_prob_control = colMeans(sum_total<=goal)
plot_data = data.frame(year = 1:17+1991,
pop_mean = sum_temp_mean,
p_ctrl = poster_prob_control,
CI_low,
CI_high)
# generate bins based on input$bins from ui.R
ggplot(data = plot_data,aes(x = year,y=pop_mean))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=CI_low, ymax=CI_high), width=.1) +
ylab("Reconstructed Population") +
theme(text = element_text(size=18), axis.text.x = element_text(size = 16))+
geom_hline(yintercept=goal, linetype="dashed")
runApp()
runApp()
runApp()
runApp()
sum_temp
is.na(NaN)
sum_temp
# generate bins based on input$bins from ui.R
ggplot(data = plot_data,aes(x = year,y=pop_mean))+
geom_line() +
geom_point() +
geom_errorbar(aes(ymin=CI_low, ymax=CI_high), width=.1) +
ylab("Reconstructed Population") +
theme(text = element_text(size=18), axis.text.x = element_text(size = 16))+
geom_hline(yintercept=goal, linetype="dashed")
View(plot_data)
sum_temp
apply(sum_temp,2,median)
apply(sum_temp,2,median,na.rm = T)
which(sum_temp>10000)
hist(sum_temp[,1])
mean(sum_temp[,1])
sd(sum_temp[,1])
runApp()
shiny::runApp()
runApp()
plot_data
plotdata
runApp()
plot_data
runApp()
plot_data
sum_total
is.na(sum_total)
sum(is.na(sum_total))
runApp()
plot_data
runApp()
runApp()
runApp()
runApp()
sum_temp[[1]]
sum_temp[[2]]
sum_temp[[3]]
sum_temp[[5]]
sum_temp[[8]]
sum_temp_mean
apply(sum_temp,2,median)
sum_temp_mean = apply(sum_temp,2,median,na.rm = T)
sum_temp_mean
poster_prob_control = colMeans(sum_total<=goal)
poster_prob_control
plot_data = data.frame(year = 1:17+1991,
pop_mean = sum_temp_mean,
p_ctrl = poster_prob_control,
CI_low,
CI_high)
sum_temp_mean = apply(sum_temp,2,median,na.rm = T)
CI_low = apply(sum_temp,2,quantile,0.025, na.rm = T)
CI_high = apply(sum_temp,2,quantile,0.975, na.rm = T)
poster_prob_control = colMeans(sum_total<=goal)
plot_data = data.frame(year = 1:17+1991,
pop_mean = sum_temp_mean,
p_ctrl = poster_prob_control,
CI_low,
CI_high)
plot_data
runApp()
runApp()
shiny::runApp()
runApp()
1/1.96
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
v
Scheme_temp[[1]]
runApp()
Scheme_temp[[1]]
runApp()
Scheme_temp[[1]]
Scheme_temp[[2]]
View(sum_temp)
sum_temp_mean
Q
runApp()
runApp()
runApp()
View(Harvest_matrix_at_this_level)
skip
View(analysisScheme_SimpleDD)
View(harv_weight)
i = 1
temp = mcmc_list[[i]]
nage = c(nrow(temp$fecundity.mcmc),nrow(temp$survival.mcmc)-nrow(temp$fecundity.mcmc))
period = ncol(temp$fecundity.mcmc)
harvest_rate = matrix( colSums(temp$harvest.mcmc)/(colSums(temp$living.mcmc)+colSums(temp$harvest.mcmc)))
harvest_rate = (harvest_rate * matrix(1-skip))+1e-5
View(harvest_rate)
get_hypo_harvest_portion_simpleDD_Cpp(matrix(temp$living.mcmc[,1]+temp$harvest.mcmc[,1]),
temp$living.mcmc,
harvest_rate,
temp$survival.mcmc,
temp$fecundity.mcmc,
temp$SRB.mcmc,
harv_weight,
nage,period,K)
harvest_rate = matrix( colSums(temp$harvest.mcmc)/(colSums(temp$living.mcmc)+colSums(temp$harvest.mcmc)))
harvest_rate
get_hypo_harvest_portion_simpleDD_Cpp(matrix(temp$living.mcmc[,1]+temp$harvest.mcmc[,1]),
temp$living.mcmc,
harvest_rate,
temp$survival.mcmc,
temp$fecundity.mcmc,
temp$SRB.mcmc,
harv_weight,
nage,period,K)
www <- get_hypo_harvest_portion_simpleDD_Cpp(matrix(temp$living.mcmc[,1]+temp$harvest.mcmc[,1]),
temp$living.mcmc,
harvest_rate,
temp$survival.mcmc,
temp$fecundity.mcmc,
temp$SRB.mcmc,
harv_weight,
nage,period,K)
temp$living.mcmc
harvest_rate
harvest_rate = (harvest_rate * matrix(1-skip))+1e-5
matrix(temp$living.mcmc[,1]+temp$harvest.mcmc[,1])
temp$living.mcmc
harvest_rate
runApp()
n
i = 1
harv_weight = apply(harv_weight,2,function(k){k/sum(k)})
temp = mcmc_list[[i]]
nage = c(nrow(temp$fecundity.mcmc),nrow(temp$survival.mcmc)-nrow(temp$fecundity.mcmc))
period = ncol(temp$fecundity.mcmc)
harvest_rate = matrix( colSums(temp$harvest.mcmc)/(colSums(temp$living.mcmc)+colSums(temp$harvest.mcmc)))
harvest_rate = (harvest_rate * matrix(1-skip))+1e-5
get_hypo_harvest_portion_simpleDD_Cpp(matrix(temp$living.mcmc[,1]+temp$harvest.mcmc[,1]),
temp$living.mcmc,
harvest_rate,
temp$survival.mcmc,
temp$fecundity.mcmc,
temp$SRB.mcmc,
harv_weight,
nage,period,K)
getLeslie(temp$survival.mcmc[,1])
getLeslie(temp$survival.mcmc[,1],Fec = temp$fecundity.mcmc[,1],SRB = matrix(0.5,1,1))
getLeslie(matrix(temp$survival.mcmc[,1]),Fec = matrix( temp$fecundity.mcmc[,1]),SRB = matrix(0.5,1,1))
www = getLeslie(matrix(temp$survival.mcmc[,1]),Fec = matrix( temp$fecundity.mcmc[,1]),SRB = matrix(0.5,1,1))
eigen(www)
tt = get_hypo_harvest_portion_simpleDD_Cpp(matrix(temp$living.mcmc[,1]+temp$harvest.mcmc[,1]),
temp$living.mcmc,
harvest_rate,
temp$survival.mcmc,
temp$fecundity.mcmc,
temp$SRB.mcmc,
harv_weight,
nage,period,K)
www %*% tt[,1]
www
sum(tt[,1])
sum(tt[,1])/K
www_growth = www
diag(www_growth) = diag(www_growth)-1
www_growth
www_growth %*% tt
www_growth %*% tt[,1]
www_growth %*% tt[,1]+tt[,1]
www %*% tt[,1]
-www_growth %*% tt[,1]+tt[,1]
-0.5*www_growth %*% tt[,1]+tt[,1]
runApp()
shiny::runApp()
Vies
View(analysisScheme_SimpleDD())
View(analysisScheme_SimpleDD)
runApp()
runApp()
i =
temp = mcmc_list[[i]]
nage = c(nrow(temp$fecundity.mcmc),nrow(temp$survival.mcmc)-nrow(temp$fecundity.mcmc))
i = 1
temp = mcmc_list[[i]]
nage = c(nrow(temp$fecundity.mcmc),nrow(temp$survival.mcmc)-nrow(temp$fecundity.mcmc))
period = ncol(temp$fecundity.mcmc)
harvest_rate = matrix( colSums(temp$harvest.mcmc)/(colSums(temp$living.mcmc)+colSums(temp$harvest.mcmc)))
harvest_rate = (harvest_rate * matrix(1-skip))+1e-5
get_hypo_harvest_portion_simpleDD_Cpp(matrix(temp$living.mcmc[,1]+temp$harvest.mcmc[,1]),
temp$living.mcmc,
harvest_rate,
temp$survival.mcmc,
temp$fecundity.mcmc,
temp$SRB.mcmc,
harv_weight,
nage,period,K)
getLeslie(Fec = matrix(temp$fecundity.mcmc[,2]),Surv = matrix(temp$survival.mcmc[,2]),SRB = matrix(0.5,1,1))
www = getLeslie(Fec = matrix(temp$fecundity.mcmc[,2]),Surv = matrix(temp$survival.mcmc[,2]),SRB = matrix(0.5,1,1))
www %*% matrix(1,11,1)
Leslie_obs = getLeslie(Fec = matrix(temp$fecundity.mcmc[,1]),Surv = matrix(temp$survival.mcmc[,1]),SRB = matrix(0.5,1,1))
Leslie_obs
diag(Leslie_obs) = diag(Leslie_obs)-1
Leslie_obs
living <- get_hypo_harvest_portion_simpleDD_Cpp(matrix(temp$living.mcmc[,1]+temp$harvest.mcmc[,1]),
temp$living.mcmc,
harvest_rate,
temp$survival.mcmc,
temp$fecundity.mcmc,
temp$SRB.mcmc,
harv_weight,
nage,period,K)
living_obs <- temp$living.mcmc
K = 1100
sum(living_obs[,1])
sum(living_obs[,1])/K
L_intro <- Leslie_obs/(1-sum(living_obs[,1])/K)
Leslie_obs
Leslie_now <- Leslie_obs * (1-sum(living[,1])/K)
Leslie_now
(1-sum(living[,1])/K)
Leslie_now %*% living[,1] + living[,1]
Leslie_now <- L_intro * (1-sum(living[,1])/K)
Leslie_now
Leslie_now %*% living[,1] + living[,1]
shiny::runApp()
runApp()
runApp()
sum_total[[1]]
sum_temp
sum_temp_mean
View(plot_data)
runApp()
View(plot_data)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
View(plot_data)
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(plot_data)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
View(plot_data)
shiny::runApp()
runApp()
runApp()
View(sum_temp)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
View(analysisScheme_SimpleDD())
View(analysisScheme_SimpleDD)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tabPanel
?downloadButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(jsonlite)
runApp()
?write_json
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
?median
?median.array
?size
?dim
rr <- matrix(NA,4,5)
rr
dim(rr)
matrix(dim(rr))
`[`(rr,1,1)
rr <- matrix(N1:20,4,5)
rr <- matrix(1:20,4,5)
`[`(rr,1,1)
`[`(rr,1,2)
rr
c(paste0("F",1:8),paste0("M",1:3))
?quantile
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
